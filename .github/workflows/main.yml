name: Deploy to EC2
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug Git Tags
        run: |
          git tag
          git describe --tags --abbrev=0
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build and Test Project
        run: |
          chmod +x gradlew
          ./gradlew build test
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: configservice-jar
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: configservice-jar
          path: ./

      - name: Deploy JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "./*.jar"
          target: "/opt/tata/configservice/"

      - name: Deploy and Run Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            cd /opt/tata/configservice
            
            # 停止並刪除現有容器
            docker stop configservice || true
            docker rm configservice || true
            
            # 確保 JAR 檔案已正確複製
            ls -l /opt/tata/configservice/*.jar
            
            # 檢查 Dockerfile 是否存在
            if [ ! -f /opt/tata/configservice/Dockerfile ]; then
              echo "Dockerfile not found"
              exit 1
            fi
            
            # 建立 Docker 映像
            docker build --no-cache --progress=plain -t configservice . || exit 1
            
            # 啟動新容器
            docker run -d --name=configservice --network tata-network -p 8888:8888 \
            -e SERVER_HOST=127.0.0.1 \
            -e SERVER_PORT=8888 \
            -e SECURITY_USERNAME=admin \
            -e SECURITY_PASSWORD=password \
            -e SPRING_PROFILES_ACTIVE=dev \
            configservice || exit 1
  
            # 等待一段時間，讓容器和服務完全啟動
            sleep 30
  
            # 檢查容器是否正在運行
            if [ "$(docker ps -q -f name=configservice)" ]; then
              echo "Container is running."
            else
              echo "Container is not running."
              exit 1
            fi

            # 檢查端口是否正在監聽
            if netstat -tuln | grep :8888; then
              echo "Port 8888 is open."
            else
              echo "Port 8888 is not open."
              exit 1
            fi
